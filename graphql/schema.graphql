# import Cliente from "types/Cliente.graphql"
# import Veiculo from "types/Veiculo.graphql"
# import Peca from "types/Peca.graphql"
# import Servico from "types/Servico.graphql"

input QueryInput {
  # query: deve ser na forma "name=Lucia&lastName=Oliv&endereco.rua=Jose". Detalhes em lucis-api-query
  query: String
  # orderBy: deve ser da forma "+name,-lastName...", com o + indicando crescente e o - indicando descrescente
  orderBy: String
  # limit: indica o tamanho de cada p치gina (quantidade de elementos)
  limit: Int
  # page: indica a p치gina requisitada
  page: Int
}

type QueryMetadata {
  # query: deve ser na forma "name=Lucia&lastName=Oliv&endereco.rua=Jose". Detalhes em lucis-api-query
  query: String
  # orderBy: deve ser da forma "+name,-lastName...", com o + indicando crescente e o - indicando descrescente
  orderBy: String
  # limit: indica o tamanho de cada p치gina (quantidade de elementos)
  limit: Int
  # page: indica a p치gina requisitada
  page: Int
  # total: indica o total de elementos
  total: Int
}

type Clientes {
  entities: [Cliente]
  metadata: QueryMetadata
}

type Veiculos {
  entities: [Veiculo]
  metadata: QueryMetadata
}

type Pecas {
  entities: [Peca]
  metadata: QueryMetadata
}

type Servicos {
  entities: [Servico]
  metadata: QueryMetadata
}

type Query {
  cliente(id: String!): Cliente
  clientes(data: QueryInput!): Clientes
  veiculo(id: String!): Veiculo
  veiculos(data: QueryInput!): Veiculos
  peca(id: String!): Peca
  pecas(data: QueryInput!): Pecas
  servico(id: String!): Servico
  servicos(data: QueryInput!): Servicos
}

type Mutation {
  addCliente(fields: ClienteInput!): Cliente
  updateCliente(id: String!, fields: ClienteInput!): Cliente
  addVeiculo(fields: VeiculoInput!): Veiculo
  updateVeiculo(id: String!, fields: VeiculoInput!): Veiculo
  addPeca(fields: PecaInput!): Peca
  updatePeca(id: String!, fields: PecaInput!): Peca
  addServico(fields: ServicoInput!): Servico
  updateServico(id: String!, fields: ServicoInput!): Servico
}